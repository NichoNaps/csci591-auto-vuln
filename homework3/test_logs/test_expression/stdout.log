Covers Lines 2 - 2
Constraints:

Mappings:
Layer 0
   x => x_0
   y => y_0


############ Found Node {: b'{'
############ Found Node declaration: b'int z = 100 + myFunc();'
(init_declarator declarator: (identifier) value: (binary_expression left: (number_literal) right: (call_expression function: (identifier) arguments: (argument_list))))
Parsing Expression: (binary_expression left: (number_literal) right: (call_expression function: (identifier) arguments: (argument_list)))  ->  100 + myFunc()
Parsing Expression: (number_literal)  ->  100
Parsing Expression: (call_expression function: (identifier) arguments: (argument_list))  ->  myFunc()
OPERATOR +
Applying 0 post assignments of expression
Performing Declaration z = 100 + call_myFunc_0;
############ Found Node if_statement: b'if (-(x+y) + y++ / 2 <= 0 && (1 && --x)) {\n        x = x + 2 * 7;\n    }'
Parsing Expression: (parenthesized_expression (binary_expression left: (binary_expression left: (binary_expression left: (unary_expression argument: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))) right: (binary_expression left: (update_expression argument: (identifier)) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (binary_expression left: (number_literal) right: (update_expression argument: (identifier))))))  ->  (-(x+y) + y++ / 2 <= 0 && (1 && --x))
Parsing Expression: (binary_expression left: (binary_expression left: (binary_expression left: (unary_expression argument: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))) right: (binary_expression left: (update_expression argument: (identifier)) right: (number_literal))) right: (number_literal)) right: (parenthesized_expression (binary_expression left: (number_literal) right: (update_expression argument: (identifier)))))  ->  -(x+y) + y++ / 2 <= 0 && (1 && --x)
Parsing Expression: (binary_expression left: (binary_expression left: (unary_expression argument: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))) right: (binary_expression left: (update_expression argument: (identifier)) right: (number_literal))) right: (number_literal))  ->  -(x+y) + y++ / 2 <= 0
Parsing Expression: (binary_expression left: (unary_expression argument: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))) right: (binary_expression left: (update_expression argument: (identifier)) right: (number_literal)))  ->  -(x+y) + y++ / 2
Parsing Expression: (unary_expression argument: (parenthesized_expression (binary_expression left: (identifier) right: (identifier))))  ->  -(x+y)
Parsing Expression: (parenthesized_expression (binary_expression left: (identifier) right: (identifier)))  ->  (x+y)
Parsing Expression: (binary_expression left: (identifier) right: (identifier))  ->  x+y
Parsing Expression: (identifier)  ->  x
x  ->  x_0
Parsing Expression: (identifier)  ->  y
y  ->  y_0
OPERATOR +
Parsing Expression: (binary_expression left: (update_expression argument: (identifier)) right: (number_literal))  ->  y++ / 2
Parsing Expression: (update_expression argument: (identifier))  ->  y++
Found Pre/Post assignment on y
Parsing Expression: (number_literal)  ->  2
OPERATOR /
OPERATOR +
Parsing Expression: (number_literal)  ->  0
OPERATOR <=
Parsing Expression: (parenthesized_expression (binary_expression left: (number_literal) right: (update_expression argument: (identifier))))  ->  (1 && --x)
Parsing Expression: (binary_expression left: (number_literal) right: (update_expression argument: (identifier)))  ->  1 && --x
Parsing Expression: (number_literal)  ->  1
Parsing Expression: (update_expression argument: (identifier))  ->  --x
Found Pre/Post assignment on x
OPERATOR &&
OPERATOR &&
Applying 1 post assignments of expression
Got constraint from if statement: And(0 >= -1*(x_0 + y_0) + y_0/2,
    And(If(1 == 0, False, True), If(x_1 == 0, False, True)))
>>>>>>>>>>>> Starting TRUE Fork for (-(x+y) + y++ / 2 <= 0 && (1 && --x))
Covers Lines 6 - 6
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
And(0 >= -1*(x_0 + y_0) + y_0/2,
    And(If(1 == 0, False, True), If(x_1 == 0, False, True)))

Mappings:
Layer 0
   x => x_1
   y => y_1
   z => z_0


############ Found Node compound_statement: b'{\n        x = x + 2 * 7;\n    }'
############ Found Node {: b'{'
############ Found Node expression_statement: b'x = x + 2 * 7;'
Parsing Expression: (binary_expression left: (identifier) right: (binary_expression left: (number_literal) right: (number_literal)))  ->  x + 2 * 7
Parsing Expression: (identifier)  ->  x
x  ->  x_1
Parsing Expression: (binary_expression left: (number_literal) right: (number_literal))  ->  2 * 7
Parsing Expression: (number_literal)  ->  2
Parsing Expression: (number_literal)  ->  7
OPERATOR *
OPERATOR +
Applying 0 post assignments of expression
Performing Assignment: x = x_1 + 2*7;
############ Found Node }: b'}'
Hit end of code block, going up node tree and then to the next sibling:
(compound_statement (expression_statement (assignment_expression left: (identifier) right: (binary_expression left: (identifier) right: (binary_expression left: (number_literal) right: (number_literal)))))) b'{\n        x = x + 2 * 7;\n    }'
Hit end of code block, going up node tree and then to the next sibling:
(if_statement condition: (parenthesized_expression (number_literal)) consequence: (compound_statement)) b'if (0) {}'
############ Found Node if_statement: b'if (0) {}'
Parsing Expression: (parenthesized_expression (number_literal))  ->  (0)
Parsing Expression: (number_literal)  ->  0
Applying 0 post assignments of expression
Got constraint from if statement: If(0 == 0, False, True)
>>>>>>>>>>>> Starting TRUE Fork for (0)
Covers Lines 10 - 10
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
And(0 >= -1*(x_0 + y_0) + y_0/2,
    And(If(1 == 0, False, True), If(x_1 == 0, False, True)))
x_2 == x_1 + 2*7
If(0 == 0, False, True)

INFEASIBLE

Mappings:
Layer 0
   x => x_2
   y => y_1
   z => z_0


INFEASIBLE!
>>>>>>>>>>>> Starting FALSE Fork for (0)
Covers Lines 12 - 12
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
And(0 >= -1*(x_0 + y_0) + y_0/2,
    And(If(1 == 0, False, True), If(x_1 == 0, False, True)))
x_2 == x_1 + 2*7
Not(If(0 == 0, False, True))

Mappings:
Layer 0
   x => x_2
   y => y_1
   z => z_0


############ Found Node return_statement: b'return 1;'
Function Returned 1
>>>>>>>>>>>> Starting FALSE Fork for (-(x+y) + y++ / 2 <= 0 && (1 && --x))
Covers Lines 10 - 10
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
Not(And(0 >= -1*(x_0 + y_0) + y_0/2,
        And(If(1 == 0, False, True),
            If(x_1 == 0, False, True))))

Mappings:
Layer 0
   x => x_1
   y => y_1
   z => z_0


############ Found Node if_statement: b'if (0) {}'
Parsing Expression: (parenthesized_expression (number_literal))  ->  (0)
Parsing Expression: (number_literal)  ->  0
Applying 0 post assignments of expression
Got constraint from if statement: If(0 == 0, False, True)
>>>>>>>>>>>> Starting TRUE Fork for (0)
Covers Lines 10 - 10
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
Not(And(0 >= -1*(x_0 + y_0) + y_0/2,
        And(If(1 == 0, False, True),
            If(x_1 == 0, False, True))))
If(0 == 0, False, True)

INFEASIBLE

Mappings:
Layer 0
   x => x_1
   y => y_1
   z => z_0


INFEASIBLE!
>>>>>>>>>>>> Starting FALSE Fork for (0)
Covers Lines 12 - 12
Constraints:
z_0 == 100 + call_myFunc_0
x_1 == x_0 - 1
y_1 == y_0 + 1
Not(And(0 >= -1*(x_0 + y_0) + y_0/2,
        And(If(1 == 0, False, True),
            If(x_1 == 0, False, True))))
Not(If(0 == 0, False, True))

Mappings:
Layer 0
   x => x_1
   y => y_1
   z => z_0


############ Found Node return_statement: b'return 1;'
Function Returned 1




###### Stats on symbolic state tree:
Infeasible states: 2

Feasible paths: 2

Feasible paths to target (return 1;): 2

#### Feasible path to target 1/2:
Constraints on function parameters to reach target statement:
0 >= -1*x_0 + -1*y_0 + y_0/2
Not(x_0 == 1)

Concrete values to reach target statement:
y_0 = 0
x_0 = 0

#### Feasible path to target 2/2:
Constraints on function parameters to reach target statement:
Not(And(0 >= -1*x_0 + -1*y_0 + y_0/2, Not(x_0 == 1)))

Concrete values to reach target statement:
y_0 = 0
x_0 = -1

